### YamlMime:ManagedReference
items:
- uid: ChessSharp.ChessUtilities
  commentId: T:ChessSharp.ChessUtilities
  id: ChessUtilities
  parent: ChessSharp
  children:
  - ChessSharp.ChessUtilities.GetValidMoves(ChessSharp.GameBoard)
  - ChessSharp.ChessUtilities.GetValidMovesOfSourceSquare(ChessSharp.SquareData.Square,ChessSharp.GameBoard)
  langs:
  - csharp
  - vb
  name: ChessUtilities
  nameWithType: ChessUtilities
  fullName: ChessSharp.ChessUtilities
  type: Class
  source:
    remote:
      path: src/ChessSharp/ChessUtilities.cs
      branch: master
      repo: https://github.com/Youssef1313/ChessSharp.git
    id: ChessUtilities
    path: ../src/ChessSharp/ChessUtilities.cs
    startLine: 11
  assemblies:
  - ChessSharp
  namespace: ChessSharp
  summary: "\nA static class containing helper methods.\n"
  example: []
  syntax:
    content: public static class ChessUtilities
    content.vb: Public Module ChessUtilities
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: ChessSharp.ChessUtilities.GetValidMoves(ChessSharp.GameBoard)
  commentId: M:ChessSharp.ChessUtilities.GetValidMoves(ChessSharp.GameBoard)
  id: GetValidMoves(ChessSharp.GameBoard)
  parent: ChessSharp.ChessUtilities
  langs:
  - csharp
  - vb
  name: GetValidMoves(GameBoard)
  nameWithType: ChessUtilities.GetValidMoves(GameBoard)
  fullName: ChessSharp.ChessUtilities.GetValidMoves(ChessSharp.GameBoard)
  type: Method
  source:
    remote:
      path: src/ChessSharp/ChessUtilities.cs
      branch: master
      repo: https://github.com/Youssef1313/ChessSharp.git
    id: GetValidMoves
    path: ../src/ChessSharp/ChessUtilities.cs
    startLine: 86
  assemblies:
  - ChessSharp
  namespace: ChessSharp
  summary: Gets the valid moves of the given <xref href="ChessSharp.GameBoard" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static List<Move> GetValidMoves(GameBoard board)
    parameters:
    - id: board
      type: ChessSharp.GameBoard
      description: The <xref href="ChessSharp.GameBoard" data-throw-if-not-resolved="false"></xref> that you want to get its valid moves.
    return:
      type: System.Collections.Generic.List{ChessSharp.Move}
      description: Returns a list of the valid moves.
    content.vb: Public Shared Function GetValidMoves(board As GameBoard) As List(Of Move)
  overload: ChessSharp.ChessUtilities.GetValidMoves*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ChessSharp.ChessUtilities.GetValidMovesOfSourceSquare(ChessSharp.SquareData.Square,ChessSharp.GameBoard)
  commentId: M:ChessSharp.ChessUtilities.GetValidMovesOfSourceSquare(ChessSharp.SquareData.Square,ChessSharp.GameBoard)
  id: GetValidMovesOfSourceSquare(ChessSharp.SquareData.Square,ChessSharp.GameBoard)
  parent: ChessSharp.ChessUtilities
  langs:
  - csharp
  - vb
  name: GetValidMovesOfSourceSquare(Square, GameBoard)
  nameWithType: ChessUtilities.GetValidMovesOfSourceSquare(Square, GameBoard)
  fullName: ChessSharp.ChessUtilities.GetValidMovesOfSourceSquare(ChessSharp.SquareData.Square, ChessSharp.GameBoard)
  type: Method
  source:
    remote:
      path: src/ChessSharp/ChessUtilities.cs
      branch: master
      repo: https://github.com/Youssef1313/ChessSharp.git
    id: GetValidMovesOfSourceSquare
    path: ../src/ChessSharp/ChessUtilities.cs
    startLine: 122
  assemblies:
  - ChessSharp
  namespace: ChessSharp
  summary: Gets the valid moves of the given <xref href="ChessSharp.GameBoard" data-throw-if-not-resolved="false"></xref> that has a specific given source <xref href="ChessSharp.SquareData.Square" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static List<Move> GetValidMovesOfSourceSquare(Square source, GameBoard board)
    parameters:
    - id: source
      type: ChessSharp.SquareData.Square
      description: The source <xref href="ChessSharp.SquareData.Square" data-throw-if-not-resolved="false"></xref> that you&apos;re looking for its valid moves.
    - id: board
      type: ChessSharp.GameBoard
      description: The <xref href="ChessSharp.GameBoard" data-throw-if-not-resolved="false"></xref> that you want to get its valid moves from the specified square.
    return:
      type: System.Collections.Generic.List{ChessSharp.Move}
      description: Returns a list of the valid moves that has the given source square.
    content.vb: Public Shared Function GetValidMovesOfSourceSquare(source As Square, board As GameBoard) As List(Of Move)
  overload: ChessSharp.ChessUtilities.GetValidMovesOfSourceSquare*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: ChessSharp
  commentId: N:ChessSharp
  name: ChessSharp
  nameWithType: ChessSharp
  fullName: ChessSharp
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: ChessSharp.GameBoard
  commentId: T:ChessSharp.GameBoard
  parent: ChessSharp
  name: GameBoard
  nameWithType: GameBoard
  fullName: ChessSharp.GameBoard
- uid: ChessSharp.ChessUtilities.GetValidMoves*
  commentId: Overload:ChessSharp.ChessUtilities.GetValidMoves
  name: GetValidMoves
  nameWithType: ChessUtilities.GetValidMoves
  fullName: ChessSharp.ChessUtilities.GetValidMoves
- uid: System.Collections.Generic.List{ChessSharp.Move}
  commentId: T:System.Collections.Generic.List{ChessSharp.Move}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Move>
  nameWithType: List<Move>
  fullName: System.Collections.Generic.List<ChessSharp.Move>
  nameWithType.vb: List(Of Move)
  fullName.vb: System.Collections.Generic.List(Of ChessSharp.Move)
  name.vb: List(Of Move)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ChessSharp.Move
    name: Move
    nameWithType: Move
    fullName: ChessSharp.Move
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ChessSharp.Move
    name: Move
    nameWithType: Move
    fullName: ChessSharp.Move
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: ChessSharp.SquareData.Square
  commentId: T:ChessSharp.SquareData.Square
  parent: ChessSharp.SquareData
  name: Square
  nameWithType: Square
  fullName: ChessSharp.SquareData.Square
- uid: ChessSharp.ChessUtilities.GetValidMovesOfSourceSquare*
  commentId: Overload:ChessSharp.ChessUtilities.GetValidMovesOfSourceSquare
  name: GetValidMovesOfSourceSquare
  nameWithType: ChessUtilities.GetValidMovesOfSourceSquare
  fullName: ChessSharp.ChessUtilities.GetValidMovesOfSourceSquare
- uid: ChessSharp.SquareData
  commentId: N:ChessSharp.SquareData
  name: ChessSharp.SquareData
  nameWithType: ChessSharp.SquareData
  fullName: ChessSharp.SquareData
